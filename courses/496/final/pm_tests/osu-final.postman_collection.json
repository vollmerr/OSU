{
	"info": {
		"_postman_id": "348495cb-7618-448e-9d90-f800708c8800",
		"name": "osu-final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Visit",
			"description": "",
			"item": [
				{
					"name": "/visits",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08d972cb-4866-453a-9062-d34b8c99cdb8",
								"type": "text/javascript",
								"exec": [
									"const visit = pm.response.json();",
									"",
									"// this id will be used for future tests",
									"pm.globals.set(\"VISIT--id\", visit.id);",
									"",
									"pm.test('should have a `201` response code', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('should return a type', () => {",
									"    pm.expect(visit.type).to.equal('Visit');",
									"});",
									"",
									"pm.test('should return the new id', () => {",
									"    pm.expect(visit.id).to.exist;",
									"});",
									"",
									"pm.test('should return the correct attributes', () => {",
									"    pm.expect(visit).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('VISIT__NEW'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(visit.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should set the updated and created timestamps', () => {",
									"    pm.expect(visit.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(visit.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(visit).to.have.own.property('links');",
									"    pm.expect(visit.links).to.have.own.property('self');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "059eab91-82e1-4c04-967a-c91cd6168478",
								"type": "text/javascript",
								"exec": [
									"// create new animal",
									"const animalId = '123';",
									"",
									"// values for new visit",
									"const newValues = {",
									"    animalId,",
									"    startDate: '2018-05-25T02:34:41.637Z',",
									"    endDate: '2018-05-25T04:34:41.637Z',",
									"    reason: 'test reason 1',",
									"};",
									"",
									"pm.globals.set('VISIT__NEW', JSON.stringify(newValues));",
									"Object.keys(newValues).forEach((x) => {",
									"    pm.globals.set(`VISIT__NEW--${x}`, newValues[x]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"startDate\": \"{{VISIT__NEW--startDate}}\",\n    \"endDate\": \"{{VISIT__NEW--endDate}}\",\n    \"reason\": \"{{VISIT__NEW--reason}}\",\n    \"animalId\": \"{{VISIT__NEW--animalId}}\"\n}"
						},
						"url": {
							"raw": "{{API_URL}}/visits",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"visits"
							]
						}
					},
					"response": []
				},
				{
					"name": "/visits",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c81d9915-b982-4d14-9274-b02c0b78afff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11b78bc5-46d9-4713-8fce-539510063ba9",
								"type": "text/javascript",
								"exec": [
									"const visits = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return an array of visits', () => {",
									"    pm.expect(visits.length).to.be.above(0);",
									"});",
									"",
									"pm.test('should include the visit created', () => {",
									"    const visit = visits.filter(x => x.id === pm.globals.get('VISIT--id'));",
									"    pm.expect(visit.length).to.equal(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{API_URL}}/visits",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"visits"
							]
						}
					},
					"response": []
				},
				{
					"name": "/visits/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e794e61-5d91-4011-b485-9f2ccabf2ace",
								"type": "text/javascript",
								"exec": [
									"const visit = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return a `Visit` type', () => {",
									"    pm.expect(visit.type).to.equal('Visit');",
									"});",
									"",
									"pm.test('should return the id', () => {",
									"    pm.expect(visit.id).to.exist;",
									"});",
									"",
									"pm.test('should return the correct attributes', () => {",
									"    pm.expect(visit).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('VISIT__NEW'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(visit.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should set the updated and created timestamps', () => {",
									"    pm.expect(visit.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(visit.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(visit).to.have.own.property('links');",
									"    pm.expect(visit.links).to.have.own.property('self');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{API_URL}}/visits/{{VISIT--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"visits",
								"{{VISIT--id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/visits/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22a1579f-632a-470d-a229-6bf5eda78e29",
								"type": "text/javascript",
								"exec": [
									"// create new animal",
									"const animalId = '456';",
									"",
									"// values for edited visit",
									"const editValues = {",
									"    animalId,",
									"    startDate: '2018-01-25T02:34:41.637Z',",
									"    endDate: '2018-01-25T04:34:41.637Z',",
									"    reason: 'test reason 2',",
									"};",
									"",
									"pm.globals.set('VISIT__EDIT', JSON.stringify(editValues));",
									"Object.keys(editValues).forEach((x) => {",
									"    pm.globals.set(`VISIT__EDIT--${x}`, editValues[x]);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7b90eee-80ca-4f2b-a44c-50ba5f3fb416",
								"type": "text/javascript",
								"exec": [
									"const visit = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return a type', () => {",
									"    pm.expect(visit.type).to.equal('Visit');",
									"});",
									"",
									"pm.test('should return the same id', () => {",
									"    pm.expect(visit.id).to.equal(pm.globals.get('VISIT--id'));",
									"});",
									"",
									"pm.test('should return the updated attributes', () => {",
									"    pm.expect(visit).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('VISIT__EDIT'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(visit.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should have updated and created timestamps', () => {",
									"    pm.expect(visit.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(visit.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(visit).to.have.own.property('links');",
									"    pm.expect(visit.links).to.have.own.property('self');",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"startDate\": \"{{VISIT__EDIT--startDate}}\",\n    \"endDate\": \"{{VISIT__EDIT--endDate}}\",\n    \"reason\": \"{{VISIT__EDIT--reason}}\",\n    \"animalId\": \"{{VISIT__EDIT--animalId}}\"\n}"
						},
						"url": {
							"raw": "{{API_URL}}/visits/{{VISIT--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"visits",
								"{{VISIT--id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/visits/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72af0ad2-902d-40d6-af3a-d29ec138cf53",
								"type": "text/javascript",
								"exec": [
									"pm.test('should have a `204` response code', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{API_URL}}/visits/{{VISIT--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"visits",
								"{{VISIT--id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Animal",
			"description": "",
			"item": [
				{
					"name": "/animals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b825cad9-dd4e-4cd7-842a-a02e748c6d30",
								"type": "text/javascript",
								"exec": [
									"const animal = pm.response.json();",
									"",
									"// this id will be used for future tests",
									"pm.globals.set(\"ANIMAL--id\", animal.id);",
									"",
									"pm.test('should have a `201` response code', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('should return a type', () => {",
									"    pm.expect(animal.type).to.equal('Animal');",
									"});",
									"",
									"pm.test('should return the new id', () => {",
									"    pm.expect(animal.id).to.exist;",
									"});",
									"",
									"pm.test('should return the correct attributes', () => {",
									"    pm.expect(animal).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('ANIMAL__NEW'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(animal.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should set the updated and created timestamps', () => {",
									"    pm.expect(animal.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(animal.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(animal).to.have.own.property('links');",
									"    pm.expect(animal.links).to.have.own.property('self');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f476cad2-ed54-4320-97e1-9607a892f0df",
								"type": "text/javascript",
								"exec": [
									"// values for new animal",
									"const newValues = {",
									"    name: 'woofy',",
									"    age: '11',",
									"    type: 'dog',",
									"    ownerFirstName: 'rick',",
									"    ownerLastName: 'james',",
									"};",
									"",
									"pm.globals.set('ANIMAL__NEW', JSON.stringify(newValues));",
									"Object.keys(newValues).forEach((x) => {",
									"    pm.globals.set(`ANIMAL__NEW--${x}`, newValues[x]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{ANIMAL__NEW--name}}\",\n    \"age\": \"{{ANIMAL__NEW--age}}\",\n    \"type\": \"{{ANIMAL__NEW--type}}\",\n    \"ownerFirstName\": \"{{ANIMAL__NEW--ownerFirstName}}\",\n    \"ownerLastName\": \"{{ANIMAL__NEW--ownerLastName}}\"\n}"
						},
						"url": {
							"raw": "{{API_URL}}/animals",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "/animals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c81d9915-b982-4d14-9274-b02c0b78afff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58f19ccc-b72b-4444-9cd8-470245aa34a3",
								"type": "text/javascript",
								"exec": [
									"const animals = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return an array of animals', () => {",
									"    pm.expect(animals.length).to.be.above(0);",
									"});",
									"",
									"pm.test('should include the animal created', () => {",
									"    const animal = animals.filter(x => x.id === pm.globals.get('ANIMAL--id'));",
									"    pm.expect(animal.length).to.equal(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{API_URL}}/animals",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "/animals/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "259f1d22-ffaa-42e4-9700-874d13c361da",
								"type": "text/javascript",
								"exec": [
									"const animal = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return a `Animal` type', () => {",
									"    pm.expect(animal.type).to.equal('Animal');",
									"});",
									"",
									"pm.test('should return the id', () => {",
									"    pm.expect(animal.id).to.exist;",
									"});",
									"",
									"pm.test('should return the correct attributes', () => {",
									"    pm.expect(animal).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('ANIMAL__NEW'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(animal.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should set the updated and created timestamps', () => {",
									"    pm.expect(animal.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(animal.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(animal).to.have.own.property('links');",
									"    pm.expect(animal.links).to.have.own.property('self');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{API_URL}}/animals/{{ANIMAL--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"animals",
								"{{ANIMAL--id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/animals/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "472dbca0-2580-4c85-a53c-d98afb080d84",
								"type": "text/javascript",
								"exec": [
									"// values for edited animal",
									"const editValues = {",
									"    name: 'furball',",
									"    age: '22',",
									"    type: 'cat',",
									"    ownerFirstName: 'bruce',",
									"    ownerLastName: 'lee',",
									"};",
									"",
									"pm.globals.set('ANIMAL__EDIT', JSON.stringify(editValues));",
									"Object.keys(editValues).forEach((x) => {",
									"    pm.globals.set(`ANIMAL__EDIT--${x}`, editValues[x]);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3edceb23-d92e-4604-bc2e-41ae805bed2d",
								"type": "text/javascript",
								"exec": [
									"const animal = pm.response.json();",
									"",
									"pm.test('should have a `200` response code', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('should return a type', () => {",
									"    pm.expect(animal.type).to.equal('Animal');",
									"});",
									"",
									"pm.test('should return the same id', () => {",
									"    pm.expect(animal.id).to.equal(pm.globals.get('ANIMAL--id'));",
									"});",
									"",
									"pm.test('should return the updated attributes', () => {",
									"    pm.expect(animal).to.have.own.property('attributes');",
									"    const attributes = JSON.parse(pm.globals.get('ANIMAL__EDIT'));",
									"    Object.keys(attributes).forEach((key) => {",
									"        pm.expect(animal.attributes[key]).to.equal(attributes[key]);",
									"    });",
									"});",
									"",
									"pm.test('should have updated and created timestamps', () => {",
									"    pm.expect(animal.attributes).to.have.own.property('createdAt'); ",
									"    pm.expect(animal.attributes).to.have.own.property('updatedAt'); ",
									"});",
									"",
									"pm.test('should return links', () => {",
									"    pm.expect(animal).to.have.own.property('links');",
									"    pm.expect(animal.links).to.have.own.property('self');",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{ANIMAL__EDIT--name}}\",\n    \"age\": \"{{ANIMAL__EDIT--age}}\",\n    \"type\": \"{{ANIMAL__EDIT--type}}\",\n    \"ownerFirstName\": \"{{ANIMAL__EDIT--ownerFirstName}}\",\n    \"ownerLastName\": \"{{ANIMAL__EDIT--ownerLastName}}\"\n}"
						},
						"url": {
							"raw": "{{API_URL}}/animals/{{ANIMAL--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"animals",
								"{{ANIMAL--id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/animals/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34ff516d-ce04-4777-b41f-ffdfd43aebc7",
								"type": "text/javascript",
								"exec": [
									"pm.test('should have a `204` response code', () => {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{API_URL}}/animals/{{ANIMAL--id}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"animals",
								"{{ANIMAL--id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}